# -*- coding: utf-8 -*-
import json
import os
import sys
from datetime import datetime, timezone
from pathlib import Path

import requests
import yfinance as yf
from ta.momentum import RSIIndicator
from ta.trend import EMAIndicator
from ta.volatility import AverageTrueRange

# --- sys.path safety
if "/root/stockbot" not in sys.path:
    sys.path.insert(0, "/root/stockbot")

# --- Telegram helper (–¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ)
try:
    from core.utils.telegram import send_telegram_message
except Exception:

    def send_telegram_message(text: str):
        # –º—è–≥–∫–∏–π —Ñ–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –±–µ–∑ —Ç–≥
        print(f"[TG] {text}")


# --- Alpaca
ALPACA_API_KEY = os.getenv("ALPACA_API_KEY")
ALPACA_SECRET_KEY = os.getenv("ALPACA_SECRET_KEY")
ALPACA_BASE_URL = os.getenv("ALPACA_BASE_URL", "https://paper-api.alpaca.markets")
ALPACA_DATA_BASE = os.getenv("ALPACA_DATA_BASE", "https://data.alpaca.markets/v2")


def _alpaca_headers():
    return {
        "APCA-API-KEY-ID": ALPACA_API_KEY or "",
        "APCA-API-SECRET-KEY": ALPACA_SECRET_KEY or "",
    }


# --- Config / paths
CANDIDATES_PATH = "core/trading/candidates.json"
SIGNALS_PATH = "core/trading/signals.json"
REJECTED_PATH = "core/trading/rejected.json"
LOG_DIR = Path("logs")
LOG_DIR.mkdir(parents=True, exist_ok=True)

BYPASS_FILTERS = os.getenv("ELIOS_NO_FILTERS", "0") == "1"
MAX_ATR_PCT = float(os.getenv("ELIOS_MAX_ATR_PCT", "8.0"))
MAX_VOLATILITY = float(os.getenv("ELIOS_MAX_VOLATILITY", "5.0"))
MIN_VOLUME_TREND = float(os.getenv("ELIOS_MIN_VOLUME_TREND", "0.10"))
MIN_RISK_SCORE = float(os.getenv("ELIOS_MIN_RISK_SCORE", "10.0"))  # –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
MIN_BULLISH_BODY = float(os.getenv("ELIOS_MIN_BULLISH_BODY", "1.0"))
MIN_GAP_UP = float(os.getenv("ELIOS_MIN_GAP_UP", "1.0"))
MIN_VOLUME_RATIO = float(os.getenv("ELIOS_MIN_VOLUME_RATIO", "0.95"))
MODEL_SCORE_MIN = float(os.getenv("ELIOS_MODEL_SCORE_MIN", "55.0"))

TARGET_MIN = int(os.getenv("ELIOS_TARGET_MIN", "3"))
TARGET_MAX = int(os.getenv("ELIOS_TARGET_MAX", "4"))

DEBUG_MODE = os.getenv("ELIOS_DEBUG", "0") == "1"


def safe_squeeze(series):
    try:
        if hasattr(series, "ndim") and series.ndim > 1:
            return series.squeeze()
    except Exception:
        pass
    return series


def pct(a, b):
    try:
        a = float(a)
        b = float(b)
        return 100.0 * (a - b) / (b if b != 0 else 1e-9)
    except Exception:
        return 0.0


def is_tradable(symbol: str) -> bool:
    """–ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö Alpaca ‚Äî fail-open."""
    try:
        r = requests.get(
            f"{ALPACA_BASE_URL}/v2/assets/{symbol}",
            headers=_alpaca_headers(),
            timeout=7,
        )
        if r.status_code != 200:
            return True
        a = r.json() or {}
        return bool(a.get("tradable", False)) and a.get("status", "active") == "active"
    except Exception:
        return True


def last_trade_price(symbol: str, fallback_close: float | None = None) -> float | None:
    """–ë–µ—Ä—ë–º last trade –∏–∑ Alpaca, –∏–Ω–∞—á–µ –æ—Ç–¥–∞—ë–º fallback_close."""
    try:
        r = requests.get(
            f"{ALPACA_DATA_BASE}/stocks/{symbol}/trades/latest",
            params={"feed": os.getenv("ELIOS_ALPACA_FEED", "iex")},
            headers=_alpaca_headers(),
            timeout=7,
        )
        if r.status_code == 200:
            t = (r.json() or {}).get("trade") or {}
            p = float(t.get("p") or 0)
            return (
                p if p > 0 else (fallback_close if (fallback_close or 0) > 0 else None)
            )
    except Exception:
        pass
    return fallback_close if (fallback_close or 0) > 0 else None


def fetch_history(symbol: str, period="45d"):
    df = yf.download(
        symbol, period=period, interval="1d", progress=False, auto_adjust=False
    )
    if df is None or getattr(df, "empty", True):
        return None
    return df


def smart_score(alpha_score, volume_ratio, rsi, atr_pct, volatility):
    # —Å—É—Ä—Ä–æ–≥–∞—Ç –º–æ–¥–µ–ª—å–Ω–æ–≥–æ —Å–∫–æ—Ä–∞ 0..100
    sa = max(0.0, min(1.0, float(alpha_score)))
    sv = max(0.0, min(1.0, float(volume_ratio) / 2.0))
    sr = max(0.0, min(1.0, float(rsi) / 100.0))
    satr = max(0.0, 1.0 - min(1.0, float(atr_pct) / 8.0))
    svol = max(0.0, 1.0 - min(1.0, float(volatility) / 8.0))
    return float(
        (0.35 * sa + 0.25 * sv + 0.15 * sr + 0.15 * satr + 0.10 * svol) * 100.0
    )


def ensure_dir(p: Path):
    p.mkdir(parents=True, exist_ok=True)
    return p


def main():
    # –ø—Ä–æ—Å—Ç—ã–µ ¬´–≥–µ–π—Ç–∫–∏–ø–µ—Ä—ã¬ª
    wd = datetime.now(timezone.utc).weekday()
    if wd >= 5 and os.getenv("ELIOS_FORCE_OPEN", "0") != "1":
        print("‚õî –í—ã—Ö–æ–¥–Ω–æ–π ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
        return

    # —á–∏—Ç–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    with open(CANDIDATES_PATH, "r", encoding="utf-8") as f:
        tickers = [str(t).upper() for t in json.load(f)]

    print(f"üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤...")
    print(f"üöß BYPASS_FILTERS={'ON' if BYPASS_FILTERS else 'OFF'}")
    print(
        "‚öôÔ∏è –ü–æ—Ä–æ–≥–∏:",
        json.dumps(
            dict(
                MAX_ATR_PCT=MAX_ATR_PCT,
                MAX_VOLATILITY=MAX_VOLATILITY,
                MIN_VOLUME_TREND=MIN_VOLUME_TREND,
                MIN_RISK_SCORE=MIN_RISK_SCORE,
                MIN_BULLISH_BODY=MIN_BULLISH_BODY,
                MIN_GAP_UP=MIN_GAP_UP,
                MIN_VOLUME_RATIO=MIN_VOLUME_RATIO,
                MODEL_SCORE_MIN=MODEL_SCORE_MIN,
            ),
            ensure_ascii=False,
        ),
    )

    signals = {}
    rejected = {}
    reasons = {}

    snapshot_dir = ensure_dir(
        Path("logs/snapshots") / datetime.now().strftime("%Y-%m-%d_%H%M%S")
    )

    for i, symbol in enumerate(tickers, 1):
        print(f"\nüîé {i}/{len(tickers)} ‚Üí {symbol}")
        # —Å–∫–æ—Ä–æ—Å—Ç—å: –¥–æ yfinance ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–æ—Ä–≥—É–µ–º–æ—Å—Ç—å
        if not is_tradable(symbol) and not BYPASS_FILTERS:
            rejected[symbol] = "–ù–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –≤ Alpaca"
            reasons["–ù–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è"] = reasons.get("–ù–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è", 0) + 1
            continue

        df = fetch_history(symbol)
        if df is None or getattr(df, "empty", True) or df.shape[0] < 3:
            rejected[symbol] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
            reasons["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"] = reasons.get("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö", 0) + 1
            continue

        # snapshot
        try:
            (snapshot_dir / f"{symbol}.csv").write_text(df.to_csv(), encoding="utf-8")
        except Exception:
            pass

        close = safe_squeeze(df["Close"]).dropna()
        open_s = safe_squeeze(df["Open"]).dropna()
        high = safe_squeeze(df["High"]).dropna()
        low = safe_squeeze(df["Low"]).dropna()
        vol = safe_squeeze(df["Volume"]).dropna()

        if len(close) < 3 or len(open_s) < 2:
            rejected[symbol] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            reasons["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö"] = (
                reasons.get("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö", 0) + 1
            )
            continue

        # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        rsi_val = float(RSIIndicator(close=close).rsi().iloc[-1])
        ema10 = float(EMAIndicator(close=close, window=10).ema_indicator().iloc[-1])
        ema_dev = pct(close.iloc[-1], ema10)
        atr_val = float(
            AverageTrueRange(high=high, low=low, close=close, window=14)
            .average_true_range()
            .iloc[-1]
        )
        atr_pct = (
            float((atr_val / close.iloc[-1]) * 100.0) if close.iloc[-1] != 0 else 0.0
        )
        vola = float(close.pct_change().std() * 100.0)

        vol_ema = float(EMAIndicator(vol, window=10).ema_indicator().iloc[-1])
        vol_tr = float((vol.iloc[-1] / (vol_ema if vol_ema != 0 else 1.0)))
        vol_ratio = float(vol.iloc[-1] / (vol[:-1].mean() + 1e-6))

        pct_chg = pct(close.iloc[-1], close.iloc[-2])
        prev_close = float(close.iloc[-2])
        today_open = float(open_s.iloc[-1])
        today_close = float(close.iloc[-1])
        body_pct = pct(today_close, today_open)
        gap_up = pct(today_open, prev_close)

        # ¬´—Ä–∏—Å–∫-—Å–∫–æ—Ä¬ª (–∑–∞–≥–ª—É—à–∫–∞) –∏ ¬´–º–æ–¥–µ–ª—å–Ω—ã–π —Å–∫–æ—Ä¬ª
        alpha_score = max(
            0.0,
            min(
                1.0,
                0.4 * (pct_chg / 5.0)
                + 0.4 * (vol_ratio / 2.0)
                + 0.2 * (rsi_val / 100.0),
            ),
        )
        model_score = smart_score(alpha_score, vol_ratio, rsi_val, atr_pct, vola)

        # –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        price = last_trade_price(symbol, fallback_close=today_close)
        if not price or price <= 0:
            rejected[symbol] = "–¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            reasons["–¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"] = reasons.get("–¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 0) + 1
            continue

        # —Ñ–∏–ª—å—Ç—Ä—ã
        if not BYPASS_FILTERS:
            if body_pct <= 0:
                rejected[symbol] = f"–ö—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞ (body={body_pct:.2f}%)"
                reasons["–ö—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞"] = reasons.get("–ö—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞", 0) + 1
                continue
            if body_pct < MIN_BULLISH_BODY:
                rejected[symbol] = f"–°–ª–∞–±–∞—è –∑–µ–ª—ë–Ω–∞—è —Å–≤–µ—á–∞ (body={body_pct:.2f}%)"
                reasons["–°–ª–∞–±–∞—è –∑–µ–ª—ë–Ω–∞—è —Å–≤–µ—á–∞"] = (
                    reasons.get("–°–ª–∞–±–∞—è –∑–µ–ª—ë–Ω–∞—è —Å–≤–µ—á–∞", 0) + 1
                )
                continue
            if gap_up < MIN_GAP_UP or vol_ratio < MIN_VOLUME_RATIO:
                rejected[symbol] = (
                    f"Gap/–æ–±—ä—ë–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã (gap={gap_up:.2f}%, vr={vol_ratio:.2f}√ó)"
                )
                reasons["Gap/–æ–±—ä—ë–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã"] = (
                    reasons.get("Gap/–æ–±—ä—ë–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã", 0) + 1
                )
                continue
            if atr_pct > MAX_ATR_PCT:
                rejected[symbol] = f"ATR –≤—ã—Å–æ–∫–∏–π ({atr_pct:.2f}%)"
                reasons["ATR –≤—ã—Å–æ–∫–∏–π"] = reasons.get("ATR –≤—ã—Å–æ–∫–∏–π", 0) + 1
                continue
            if vola > MAX_VOLATILITY:
                rejected[symbol] = f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è ({vola:.2f}%)"
                reasons["–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è"] = (
                    reasons.get("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è", 0) + 1
                )
                continue
            if vol_tr < MIN_VOLUME_TREND:
                rejected[symbol] = f"–¢—Ä–µ–Ω–¥ –æ–±—ä—ë–º–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ({vol_tr:.2f}√ó)"
                reasons["–¢—Ä–µ–Ω–¥ –æ–±—ä—ë–º–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π"] = (
                    reasons.get("–¢—Ä–µ–Ω–¥ –æ–±—ä—ë–º–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π", 0) + 1
                )
                continue
            if (alpha_score * 100.0) < MIN_RISK_SCORE:
                rejected[symbol] = f"–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫-—Å–∫–æ—Ä ({alpha_score*100.0:.1f})"
                reasons["–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫-—Å–∫–æ—Ä"] = reasons.get("–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫-—Å–∫–æ—Ä", 0) + 1
                continue
            if model_score < MODEL_SCORE_MIN:
                rejected[symbol] = f"–°–ª–∞–±—ã–π –º–æ–¥–µ–ª—å–Ω—ã–π —Å–∫–æ—Ä ({model_score:.1f})"
                reasons["–°–ª–∞–±—ã–π –º–æ–¥–µ–ª—å–Ω—ã–π —Å–∫–æ—Ä"] = (
                    reasons.get("–°–ª–∞–±—ã–π –º–æ–¥–µ–ª—å–Ω—ã–π —Å–∫–æ—Ä", 0) + 1
                )
                continue

        # –ø—Ä–∏–Ω—è—Ç—ã–π —Å–∏–≥–Ω–∞–ª
        signals[symbol] = {
            "price": round(price, 2),
            "action": "BUY",
            "confidence": round(alpha_score, 2),
            "score": round(model_score, 2),
            "atr": round(atr_val, 2),
            "atr_pct": round(atr_pct, 2),
            "volatility": round(vola, 2),
            "volume_trend": round(vol_tr, 2),
            "bullish_body": round(body_pct, 2),
            "gap_up": round(gap_up, 2),
            "reason": "NO_FILTERS" if BYPASS_FILTERS else "OK",
        }

        # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–Ω—è—Ç–æ–º—É
        try:
            send_telegram_message(
                "\n".join(
                    [
                        "üìä –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª (BUY)",
                        f"üìå ${symbol} @ {price:.2f}",
                        f"‚àÜ%={pct_chg:.2f}% | RSI={rsi_val:.1f} | EMA dev={ema_dev:.2f}%",
                        f"ATR%={atr_pct:.2f} | Vol%={vola:.2f} | VR={vol_ratio:.2f}√ó | VTrend={vol_tr:.2f}√ó",
                        f"–°–≤–µ—á–∞: body={body_pct:.2f}% | gap={gap_up:.2f}%",
                    ]
                )
            )
        except Exception as e:
            if DEBUG_MODE:
                print(f"[WARN] telegram: {e}")

        # –æ–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–æ TARGET_MAX (–µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã)
        if not BYPASS_FILTERS and len(signals) >= TARGET_MAX:
            break

    # –∑–∞–ø–∏—Å—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    with open(SIGNALS_PATH, "w", encoding="utf-8") as f:
        json.dump(signals, f, indent=2, ensure_ascii=False)
    with open(REJECTED_PATH, "w", encoding="utf-8") as f:
        json.dump(rejected, f, indent=2, ensure_ascii=False)

    # —Å–≤–æ–¥–∫–∞
    print("\nüìä –°–≤–æ–¥–∫–∞ –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–∞–∑–æ–≤:")
    for k, v in sorted(reasons.items(), key=lambda kv: kv[1], reverse=True):
        print(f"  ‚Ä¢ {k}: {v}")
    print(f"\nüì¶ –°–∏–≥–Ω–∞–ª—ã: {len(signals)} ‚Üí {SIGNALS_PATH}")
    print(f"üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {len(rejected)} ‚Üí {REJECTED_PATH}")

    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    try:
        send_telegram_message(
            f"‚úÖ –ò—Ç–æ–≥: —Å–∏–≥–Ω–∞–ª–æ–≤ {len(signals)} (—Ü–µ–ª—å {TARGET_MIN}-{TARGET_MAX}). BYPASS={BYPASS_FILTERS}"
        )
    except Exception:
        pass


if __name__ == "__main__":
    main()
# test Fri Oct 17 12:05:43 PM +05 2025
