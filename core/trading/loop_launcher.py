import os
import subprocess
import time
from datetime import datetime
from datetime import time as dtime
from datetime import timedelta
from pathlib import Path
from zoneinfo import ZoneInfo

# .env bootstrap
from dotenv import find_dotenv, load_dotenv

from core.utils import (
    env_keys as _envkeys,
)  # noqa: F401  (–ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç env-–∫–ª—é—á–∏ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ)
from core.utils.alpaca_headers import alpaca_headers

# === –ø—Ä–æ–≥—Ä–µ—Ç—å –∫–ª—é—á–∏/—É—Ç–∏–ª–∏—Ç—ã ===
from core.utils.market_calendar import is_market_open_today
from core.utils.telegram import send_telegram_message

# ----------------- ENV / .env -----------------
try:
    # —Å–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤—ã–π .env, –ø–æ—Ç–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≤ —Ç–µ–∫—É—â–µ–º –¥–µ—Ä–µ–≤–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    load_dotenv("/root/stockbot/.env")
    env_file = find_dotenv(usecwd=True)
    if env_file:
        load_dotenv(env_file, override=True)
except Exception:
    pass

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã Alpaca endpoints (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã)
os.environ.setdefault("ALPACA_BASE_URL", "https://paper-api.alpaca.markets")
os.environ.setdefault("ALPACA_DATA_BASE", "https://data.alpaca.markets/v2")
os.environ.setdefault("ALPACA_NEWS_BASE", "https://data.alpaca.markets/v1beta1")

# ----------------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä—ã–Ω–∫–∞ (Asia/Tashkent) -----------------
# –¢–æ—Ä–≥–∏: –ü–Ω‚Äì–ü—Ç 18:30‚Äì01:00
MARKET_OPEN = dtime(18, 30)
MARKET_CLOSE = dtime(1, 0)  # —Ö–≤–æ—Å—Ç –¥–æ 01:00
EOD_BUFFER_MIN = 5  # –æ–∫–Ω–æ EOD-–ø—Ä–æ–¥–∞–∂ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ MARKET_CLOSE

# BUY-–æ–∫–Ω–æ –≤–Ω—É—Ç—Ä–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —á–∞—Å–æ–≤
BUY_WIN_START_STR = os.getenv("BUY_WINDOW_START", "18:30")  # –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¢–∞—à–∫–µ–Ω—Ç
BUY_WIN_END_STR = os.getenv("BUY_WINDOW_END", "21:00")

# –ö–∞–¥–µ–Ω—Å—ã
SELL_EVERY_MIN = int(os.getenv("SELL_EVERY_MIN", "5"))  # SELL –∏–∑ –ª—É–ø–∞ (–æ–±—ã—á–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω)
BUY_EVERY_MIN = int(os.getenv("BUY_EVERY_MIN", "10"))  # —Å–∏–≥–Ω–∞–ª/—ç–∫–∑–µ–∫—É—Ç–æ—Ä

# –§–ª–∞–≥–∏ SELL –∏–∑ –ª—É–ø–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SELL –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–∞–π–º–µ—Ä–æ–º –≤–Ω–µ –ª—É–ø–∞)
LOOP_SELL_ENABLED = os.getenv("LOOP_SELL_ENABLED", "0") == "1"
LOOP_EOD_SELL_ENABLED = os.getenv("LOOP_EOD_SELL_ENABLED", "0") == "1"

# ----------------- –°–ª—É–∂–µ–±–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª–∞ -----------------
eod_done_ordinal = -1
last_slot_buy_id = -1
last_slot_sell_id = -1
last_force_sell_date = None
notified_off_hours = False

# ----------------- –ü—É—Ç–∏ -----------------
PYTHON = "/root/stockbot/venv/bin/python"
ROOT = Path("/root/stockbot")
LOG_DIR = ROOT / "logs"
LOCK_DIR = LOG_DIR / "locks"
LOG_DIR.mkdir(parents=True, exist_ok=True)
LOCK_DIR.mkdir(parents=True, exist_ok=True)

# DEBUG: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø–µ—á–∞—Ç–∞–µ–º)
api_key_check = (
    os.getenv("APCA_API_KEY_ID") or os.getenv("ALPACA_API_KEY") or ""
).strip()
print(f"[DEBUG] ENV KEY: {'‚úÖ –ù–∞–π–¥–µ–Ω' if api_key_check else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")


# ----------------- helpers -----------------
def _parse_hhmm(s: str) -> tuple[int, int]:
    h, m = s.split(":")
    return int(h), int(m)


def within_buy_window(now_tz: datetime) -> bool:
    sh, sm = _parse_hhmm(BUY_WIN_START_STR)
    eh, em = _parse_hhmm(BUY_WIN_END_STR)
    start = now_tz.replace(hour=sh, minute=sm, second=0, microsecond=0)
    end = now_tz.replace(hour=eh, minute=em, second=0, microsecond=0)
    return start <= now_tz < end


def _slot_id(now_tz: datetime, step_min: int) -> int:
    """–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID N-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö —Å—É—Ç–æ–∫."""
    day_ord = now_tz.date().toordinal()
    minute_of_day = now_tz.hour * 60 + now_tz.minute
    slot = minute_of_day // max(1, step_min)
    return day_ord * (1440 // max(1, step_min)) + slot


def is_market_hours() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è '—Å–µ–π—á–∞—Å' –≤ —Ç–æ—Ä–≥–æ–≤–æ–µ –æ–∫–Ω–æ, —É—á–∏—Ç—ã–≤–∞—è –ø–µ—Ä–µ–ª–æ–º —Å—É—Ç–æ–∫."""
    now = datetime.now(ZoneInfo("Asia/Tashkent")).time()
    if MARKET_OPEN <= MARKET_CLOSE:
        # –æ–±—ã—á–Ω–æ–µ –æ–∫–Ω–æ –≤–Ω—É—Ç—Ä–∏ —Å—É—Ç–æ–∫
        return MARKET_OPEN <= now <= MARKET_CLOSE
    else:
        # –æ–∫–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å (–Ω–∞—à —Å–ª—É—á–∞–π 18:30‚Äì01:00)
        return now >= MARKET_OPEN or now <= MARKET_CLOSE


def in_eod_window(now_tz: datetime) -> bool:
    """True, –µ—Å–ª–∏ –º—ã –≤ EOD-–æ–∫–Ω–µ –∑–∞ EOD_BUFFER_MIN –º–∏–Ω—É—Ç –¥–æ MARKET_CLOSE."""
    # MARKET_CLOSE —É –Ω–∞—Å 01:00 –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –¥–∞—Ç–∞ *—Å–µ–≥–æ–¥–Ω—è*.
    # –ó–∞ 5 –º–∏–Ω—É—Ç –¥–æ 01:00 => 00:55..01:00
    sell_start_dt = datetime.combine(now_tz.date(), MARKET_CLOSE) - timedelta(
        minutes=EOD_BUFFER_MIN
    )
    end_dt = datetime.combine(now_tz.date(), MARKET_CLOSE)
    return sell_start_dt.time() <= now_tz.time() < end_dt.time()


def _lock_path(name: str) -> Path:
    return LOCK_DIR / f"{name}.pid"


def _is_pid_alive(pid: int) -> bool:
    try:
        os.kill(pid, 0)
        return True
    except Exception:
        return False


def _can_start_task(lock_name: str) -> bool:
    """–ù–µ –¥–∞—ë–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è (–ø–æ PID-–ª–æ–∫—É)."""
    lp = _lock_path(lock_name)
    if not lp.exists():
        return True
    try:
        txt = lp.read_text().strip()
        pid = int(txt.split()[0])
    except Exception:
        lp.unlink(missing_ok=True)
        return True
    if _is_pid_alive(pid):
        return False
    lp.unlink(missing_ok=True)
    return True


def _set_lock(lock_name: str, pid: int):
    try:
        _lock_path(lock_name).write_text(f"{pid} {int(time.time())}\n")
    except Exception:
        pass


def run_module(name: str, module_path: str):
    """–ë–ª–æ–∫–∏—Ä—É—é—â–∏–π –∑–∞–ø—É—Å–∫ (–¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è).
    module_path ‚Äî —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ '-u -m core.trading.signal_engine'
    """
    print(f"[{datetime.now()}] ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫: {name}")
    try:
        send_telegram_message(f"‚öôÔ∏è –ó–∞–ø—É—â–µ–Ω –º–æ–¥—É–ª—å: {name}")
        # –†–∞–∑–¥–µ–ª–∏–º —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã python
        subprocess.run(
            [PYTHON] + module_path.split(), env=os.environ.copy(), check=False
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
        send_telegram_message(f"‚õîÔ∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")


def run_module_bg(name: str, module_path: str, lock_name: str | None = None):
    """–ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –∑–∞–ø—É—Å–∫ (–≤ —Ñ–æ–Ω–µ) —Å PID-–ª–æ–∫–æ–º."""
    if lock_name and not _can_start_task(lock_name):
        print(f"[{datetime.now()}] ‚è© {name} –ø—Ä–æ–ø—É—â–µ–Ω ‚Äî —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        return
    print(f"[{datetime.now()}] ‚ñ∂Ô∏è –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫: {name}")
    try:
        send_telegram_message(f"‚öôÔ∏è (BG) –ó–∞–ø—É—â–µ–Ω –º–æ–¥—É–ª—å: {name}")
        proc = subprocess.Popen(
            [PYTHON] + module_path.split(),
            env=os.environ.copy(),
            stdout=subprocess.DEVNULL,
            stderr=subprocess.STDOUT,
        )
        if lock_name:
            _set_lock(lock_name, proc.pid)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
        send_telegram_message(f"‚õîÔ∏è –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")


def _fallback_flatten_all():
    """–†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è (–Ω–∞ —Å–ª—É—á–∞–π —Ñ–µ–π–ª–∞ sell_engine)."""
    import requests

    try:
        key = (
            os.getenv("ALPACA_API_KEY") or os.getenv("APCA_API_KEY_ID") or ""
        ).strip()
        sec = (
            os.getenv("ALPACA_SECRET_KEY") or os.getenv("APCA_API_SECRET_KEY") or ""
        ).strip()
        base = (
            os.getenv("ALPACA_API_BASE_URL")
            or os.getenv("ALPACA_BASE_URL")
            or "https://paper-api.alpaca.markets"
        ).strip()
        if not key or not sec:
            raise RuntimeError("ALPACA keys not set")
        h = alpaca_headers()
        r = requests.delete(
            f"{base}/v2/positions",
            params={"cancel_orders": "true"},
            headers=h,
            timeout=15,
        )
        print(f"[EOD] fallback flatten: {r.status_code}")
        send_telegram_message(f"üí£ Fallback flatten: {r.status_code}")
    except Exception as e:
        print(f"[EOD] fallback error: {e}")
        send_telegram_message(f"‚õîÔ∏è Fallback flatten error: {e}")


# ----------------- main loop -----------------
def main_loop():
    # single-instance guard
    if not _can_start_task("loop"):
        print("[LOCK] loop already running ‚Äî exit")
        return
    _set_lock("loop", os.getpid())

    global notified_off_hours, last_slot_buy_id, last_slot_sell_id, eod_done_ordinal, last_force_sell_date

    print(
        "üåÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –ò—Å–∫—Ä—ã (SELL ‚Äî –≤–Ω–µ—à–Ω–∏–π —Ç–∞–π–º–µ—Ä; –∑–¥–µ—Å—å: Signal/Executor)"
    )
    send_telegram_message(
        "üöÄ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –ò—Å–∫—Ä—ã –∑–∞–ø—É—â–µ–Ω (SELL ‚Äî –≤–Ω–µ—à–Ω–∏–π —Ç–∞–π–º–µ—Ä; –∑–¥–µ—Å—å: Signal/Executor)"
    )

    if not is_market_open_today():
        msg = "‚õîÔ∏è –°–µ–≥–æ–¥–Ω—è —Ä—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç. –ò—Å–∫—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ü–∏–∫–ª."
        print(msg)
        send_telegram_message(msg)
        return

    print("üîÅ –í—Ö–æ–¥ –≤ —Ü–∏–∫–ª while True")
    while True:
        now = datetime.now(ZoneInfo("Asia/Tashkent"))
        minute = now.minute
        hour = now.hour

        # === EOD –æ–∫–Ω–æ: –ø–æ —Ñ–ª–∞–≥—É (–∑–∞ EOD_BUFFER_MIN –º–∏–Ω—É—Ç –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è)
        if (
            LOOP_EOD_SELL_ENABLED
            and is_market_hours()
            and in_eod_window(now)
            and eod_done_ordinal != now.date().toordinal()
        ):
            print(f"[{datetime.now()}] ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫: EOD SELL (–±—É—Ñ–µ—Ä {EOD_BUFFER_MIN}m)")
            send_telegram_message(
                f"üíº EOD SELL: –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞ {EOD_BUFFER_MIN} –º–∏–Ω –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"
            )
            try:
                run_module("EOD SELL", "-u -m core.trading.sell_engine")
            except Exception as e:
                print(f"[WARN] sell_engine failed: {e}")
                _fallback_flatten_all()
            eod_done_ordinal = now.date().toordinal()

        slot_buy_id = _slot_id(now, BUY_EVERY_MIN)
        slot_sell_id = _slot_id(now, SELL_EVERY_MIN)
        print(
            f"‚è±Ô∏è {now.strftime('%H:%M:%S')} (buy_slot={slot_buy_id}, sell_slot={slot_sell_id})"
        )

        # –í–Ω–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —á–∞—Å–æ–≤ ‚Äî —Å–ø–∏–º –∏ –æ–¥–∏–Ω —Ä–∞–∑ —É–≤–µ–¥–æ–º–ª—è–µ–º
        if not is_market_hours():
            if not notified_off_hours:
                msg = f"üïî –í–Ω–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —á–∞—Å–æ–≤: {now.time()}. –ò—Å–∫—Ä–∞ —Å–ø–∏—Ç."
                print(msg)
                send_telegram_message(msg)
                notified_off_hours = True
            time.sleep(30)
            continue
        else:
            notified_off_hours = False

        # === SELL –∏–∑ –ª—É–ø–∞ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –≤–∫–ª—é—á—ë–Ω —Ñ–ª–∞–≥–æ–º –∏ –Ω–µ –≤ EOD-–æ–∫–Ω–µ
        if (
            LOOP_SELL_ENABLED
            and (minute % SELL_EVERY_MIN == 0)
            and (last_slot_sell_id != slot_sell_id)
            and not in_eod_window(now)
        ):
            run_module_bg(
                "SELL ENGINE", "-u -m core.trading.sell_engine", lock_name="sell"
            )
            last_slot_sell_id = slot_sell_id

        # === –ö–∞–∂–¥—ã–µ BUY_EVERY_MIN: —Å–∏–≥–Ω–∞–ª—ã ‚Üí –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Üí —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–¢–û–õ–¨–ö–û –≤ BUY-–æ–∫–Ω–µ)
        if (
            minute % BUY_EVERY_MIN == 0
            and last_slot_buy_id != slot_buy_id
            and not (
                hour == MARKET_CLOSE.hour and minute == MARKET_CLOSE.minute
            )  # –Ω–µ –≤ –º–æ–º–µ–Ω—Ç –≤—ã—Ö–æ–¥–∞
            and not in_eod_window(now)
            and within_buy_window(now)
        ):
            run_module("SIGNAL ENGINE", "-u -m core.trading.signal_engine")
            run_module("TRADE EXECUTOR", "-u -m core.trading.trade_executor")
            run_module(
                "POSITIONS SYNC (–ø–æ—Å–ª–µ EXECUTOR)", "-u -m core.trading.positions_sync"
            )
            last_slot_buy_id = slot_buy_id

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ (–≤ 01:00)
        if hour == MARKET_CLOSE.hour and minute == MARKET_CLOSE.minute:
            send_telegram_message("üìâ –¢–æ—Ä–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ò—Å–∫—Ä–∞ –∑–∞—Å—ã–ø–∞–µ—Ç.")
            break

        # === EOD FORCE SELL –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è ‚Äî —Ç–æ–∂–µ –ø–æ —Ñ–ª–∞–≥—É
        if (
            LOOP_EOD_SELL_ENABLED
            and (hour == MARKET_CLOSE.hour and minute == (MARKET_CLOSE.minute - 5))
            and (last_force_sell_date != now.date())
        ):
            print(f"[{datetime.now()}] ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫: SELL ENGINE (EOD 00:55)")
            send_telegram_message("üí£ FORCE SELL (–∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è)")
            run_module("SELL ENGINE", "-u -m core.trading.sell_engine")
            run_module(
                "–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–ø–æ—Å–ª–µ SELL)",
                "-u -m core.trading.positions_sync",
            )
            last_force_sell_date = now.date()

        time.sleep(2)


def _print_env_masked():
    def _mask(k: str) -> str:
        v = os.getenv(k, "")
        return (v[:4] + "‚Ä¶" + v[-4:]) if len(v) >= 12 else ("*" * len(v))

    print("ALPACA_BASE_URL =", os.getenv("ALPACA_BASE_URL"))
    print("ALPACA_API_KEY  =", _mask("ALPACA_API_KEY"))
    print("APCA_API_KEY_ID =", _mask("APCA_API_KEY_ID"))
    print("ALPACA_SECRET   =", _mask("ALPACA_SECRET_KEY"))
    print("APCA_API_SECRET =", _mask("APCA_API_SECRET_KEY"))
    print("ALPACA_DATA_BASE=", os.getenv("ALPACA_DATA_BASE"))
    print("ALPACA_NEWS_BASE=", os.getenv("ALPACA_NEWS_BASE"))


if __name__ == "__main__":
    import sys

    if "--print-env" in sys.argv:
        _print_env_masked()
        sys.exit(0)

    try:
        main_loop()
    except Exception as e:
        send_telegram_message(f"‚õîÔ∏è –ò—Å–∫—Ä–∞ –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ü–∏–∫–ª: {e}")
        raise
