# /root/stockbot/core/training/train_model.py
import pandas as pd
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

DATA_PATH = "/root/stockbot/data/merged_with_labels.csv"
MODEL_PATH = "/root/stockbot/core/training/trained_model.pkl"

print(f"üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º {DATA_PATH} –±–∞—Ç—á–∞–º–∏...")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞—Ç—á–∞–º–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
chunks = pd.read_csv(DATA_PATH, chunksize=50000)
df = pd.concat(chunks, ignore_index=True)

print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(df)}, –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")

# –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –º–µ—Ç–∫–∞–º–∏
df = df.dropna(subset=["label"])
print(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –º–µ—Ç–æ–∫: {len(df)} —Å—Ç—Ä–æ–∫")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Ç–∫–∏ –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
df["label"] = df["label"].map({"WIN": 1, "LOSS": 0})

# –£–±–∏—Ä–∞–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∏ –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
exclude_cols = ["symbol", "year", "label"]
numeric_df = df.drop(columns=[col for col in exclude_cols if col in df.columns])

# –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ
numeric_df = numeric_df.select_dtypes(include=["number"])
X = numeric_df.drop(columns=["label"], errors="ignore")
y = df["label"]

print(f"üìà –§–∏—á: {X.shape[1]}, –û–±—ä–µ–∫—Ç–æ–≤: {X.shape[0]}")

# –î–µ–ª–∏–º –Ω–∞ train/test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
print("ü§ñ –û–±—É—á–∞–µ–º RandomForest...")
model = RandomForestClassifier(
    n_estimators=200,
    max_depth=12,
    random_state=42,
    n_jobs=-1
)
model.fit(X_train, y_train)

# –û—Ü–µ–Ω–∫–∞
y_pred = model.predict(X_test)
print("üìä –û—Ç—á—ë—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
print(classification_report(y_test, y_pred))

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
joblib.dump(model, MODEL_PATH)
print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {MODEL_PATH}")
