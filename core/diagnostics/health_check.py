import json

# core/diagnostics/health_check.py
import os
from datetime import datetime, timezone
from pathlib import Path

import joblib
from openai import OpenAI

from core.connectors.alpaca_connector import get_account_equity
from core.utils.paths import TRADE_LOG_PATH
from core.utils.telegram import send_telegram_message

# === –ü—É—Ç–∏ ===
MODEL_PATH = "core/training/trained_model.pkl"
TRAINING_DATA_PATH = "core/trading/training_data.json"

SIGNALS_PATH = "core/trading/signals.json"
POSITIONS_PATH = "core/trading/open_positions.json"
TRAINING_METRICS_PATH = "logs/training_metrics.json"

# === API –∫–ª—é—á–∏ ===
ALPACA_API_KEY = os.getenv("APCA_API_KEY_ID")
ALPACA_SECRET_KEY = os.getenv("APCA_API_SECRET_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

client = OpenAI(api_key=OPENAI_API_KEY)


# === –§—É–Ω–∫—Ü–∏–∏ ===
def check_alpaca():
    try:
        equity = get_account_equity()
        return True, f"‚úÖ Alpaca API: OK (${equity})"
    except Exception as e:
        return False, f"‚ùå Alpaca API: –æ—à–∏–±–∫–∞ {str(e)}"


def check_openai():
    try:
        client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "ping"}],
            max_tokens=1,
        )
        return True, "‚úÖ OpenAI API: OK"
    except Exception as e:
        return False, f"‚ùå OpenAI API: {type(e).__name__}: {e}"


def check_model():
    try:
        joblib.load(MODEL_PATH)
        return "‚úÖ –ú–æ–¥–µ–ª—å: –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    except:
        return "‚ùå –ú–æ–¥–µ–ª—å: –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"


def check_training_data():
    try:
        with open(TRAINING_DATA_PATH) as f:
            data = json.load(f)
        return f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è: {len(data)} –∑–∞–ø–∏—Å–µ–π"
    except:
        return "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è training_data.json"


def check_trades():
    try:
        if not Path(TRADE_LOG_PATH).exists():
            return "‚ö†Ô∏è –ñ—É—Ä–Ω–∞–ª —Å–¥–µ–ª–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        with open(TRADE_LOG_PATH) as f:
            log = json.load(f)
        today = datetime.now(timezone.utc).date()
        today_trades = sum(
            1
            for trades in log.values()
            for t in trades
            if "timestamp" in t
            and datetime.fromisoformat(t["timestamp"]).date() == today
        )
        if today_trades == 0:
            return "‚ö†Ô∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
        return f"‚úÖ –°–¥–µ–ª–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_trades}"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–¥–µ–ª–æ–∫: {e}"


def check_metrics():
    try:
        with open(TRAINING_METRICS_PATH) as f:
            metrics = json.load(f)
        return f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏: Accuracy {metrics['accuracy']:.4f}, F1 WIN {metrics['f1_win']:.4f}, F1 LOSS {metrics['f1_loss']:.4f}"
    except:
        return "‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"


def check_modules():
    msgs = []
    if Path(SIGNALS_PATH).exists():
        with open(SIGNALS_PATH) as f:
            signals = json.load(f)
        msgs.append(f"‚úÖ signal_engine.py ‚Äî —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
    else:
        msgs.append("‚ö†Ô∏è signal_engine.py ‚Äî —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    if Path(POSITIONS_PATH).exists():
        mtime = datetime.fromtimestamp(os.path.getmtime(POSITIONS_PATH))
        delta = datetime.now() - mtime
        if delta.total_seconds() < 3600:
            msgs.append("‚úÖ positions_sync.py ‚Äî –ø–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            msgs.append("‚ö†Ô∏è positions_sync.py ‚Äî —Ñ–∞–π–ª –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è")

    if Path(TRAINING_DATA_PATH).exists():
        msgs.append("‚úÖ training_data_builder.py ‚Äî –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    if Path(MODEL_PATH).exists():
        msgs.append("‚úÖ strategy_trainer.py ‚Äî –º–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    return msgs


# === –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ ===
if __name__ == "__main__":
    print("üì° Elios –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    status = []
    ok, msg = check_alpaca()
    print(msg)
    status.append(msg)

    ok2, msg2 = check_openai()
    print(msg2)
    status.append(msg2)

    print(msg_model := check_model())
    print(msg_data := check_training_data())
    print(msg_trades := check_trades())
    print(msg_metrics := check_metrics())

    status += [msg_model, msg_data, msg_trades, msg_metrics]

    print("\nüß© –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π:")
    modules = check_modules()
    for m in modules:
        print(m)

    problems = [
        line for line in status if line.startswith("‚ùå") or line.startswith("‚ö†Ô∏è")
    ]
    if problems:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for p in problems:
            print(p)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    full_msg = "\n".join(
        ["üì° Elios –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"] + status + ["", "üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π:"] + modules
    )
    if problems:
        full_msg += "\n\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:\n" + "\n".join(problems)

    send_telegram_message(full_msg)
