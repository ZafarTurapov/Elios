# -*- coding: utf-8 -*-
from __future__ import annotations

import py_compile
import re
from pathlib import Path

fp = Path("core/trading/signal_engine.py")
src = fp.read_text(encoding="utf-8", errors="ignore")
lines = src.splitlines(True)

# –ù–∞–π—Ç–∏ –±–ª–æ–∫, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è "–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ä—ã–Ω–∫–∞"
start = None
for i, ln in enumerate(lines):
    if re.search(r"–ö–∞–ª–µ–Ω–¥–∞—Ä[—å—è] —Ä—ã–Ω–∫–∞", ln):
        start = i
        break

if start is None:
    print("‚ùå –ù–µ –Ω–∞—à—ë–ª –º–∞—Ä–∫–µ—Ä '–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ä—ã–Ω–∫–∞' ‚Äî –ø–∞—Ç—á –Ω–µ –ø—Ä–∏–º–µ–Ω—ë–Ω.")
    raise SystemExit(1)

# –ù–∞–π—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ _tg_new_signal –∏ –∫–æ–Ω–µ—Ü ¬´–±–∏—Ç–æ–≥–æ¬ª –±–ª–æ–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π pass/except —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–µ–≥–æ)
def_idx = None
for j in range(start, min(len(lines), start + 200)):
    if re.match(r"^\s*def\s+_tg_new_signal\s*\(", lines[j]):
        def_idx = j
        break

if def_idx is None:
    print("‚ùå –ù–µ –Ω–∞—à—ë–ª def _tg_new_signal ‚Äî –ø–∞—Ç—á –Ω–µ –ø—Ä–∏–º–µ–Ω—ë–Ω.")
    raise SystemExit(1)

# –ò—â–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –±–ª–æ–∫–∞ ‚Äî –ø—Ä–æ–π–¥—ë–º –ø–æ—Å–ª–µ def –∏ —Å–æ–±–µ—Ä—ë–º –¥–æ –ø–µ—Ä–≤–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏,
# –∑–∞—Ç–µ–º –¥–æ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—â—ë –æ–¥–∏–Ω 'except' –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–ª–æ–º–∞–Ω–Ω—ã–π try).
end = def_idx
# –¥–æ–π–¥—ë–º –¥–æ —Å—Ç—Ä–æ–∫–∏ —Å 'pass' –≤ except –∏ –¥–∞–ª—å—à–µ –µ—â—ë –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
pass_line = None
for k in range(def_idx, min(len(lines), def_idx + 120)):
    if re.match(r"^\s*pass\s*$", lines[k]):
        pass_line = k
# –ï—Å–ª–∏ –Ω–∞—à–ª–∏ 'pass', –≤–æ–∑—å–º—ë–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∫–æ–Ω–µ—Ü; –∏–Ω–∞—á–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–º 120 —Å—Ç—Ä–æ–∫–∞–º–∏
end = (pass_line + 1) if pass_line is not None else min(len(lines), def_idx + 120)

# –°–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
fixed_block = []
fixed_block.append("# –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ä—ã–Ω–∫–∞ (–º—è–≥–∫–∏–π –∏–º–ø–æ—Ä—Ç ‚Äî –Ω–µ –ª–æ–º–∞–µ–º—Å—è, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç)\n")
fixed_block.append("try:\n")
fixed_block.append("    from core.utils.market_calendar import is_market_open_today\n")
fixed_block.append("except Exception:\n")
fixed_block.append("    def is_market_open_today():\n")
fixed_block.append("        return True\n")
fixed_block.append("\n")
fixed_block.append("# --- –ï–¥–∏–Ω—ã–π —ç–º–∏—Ç—Ç–µ—Ä –∞–ª—ë—Ä—Ç–æ–≤ –≤ Telegram –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n")
fixed_block.append("def _tg_new_signal(\n")
fixed_block.append("    symbol: str,\n")
fixed_block.append("    price: float,\n")
fixed_block.append("    percent_change: float,\n")
fixed_block.append("    rsi: float,\n")
fixed_block.append("    ema_dev: float,\n")
fixed_block.append("    atr_pct: float,\n")
fixed_block.append("    volatility_pct: float,\n")
fixed_block.append('    gpt_reply: str = ""\n')
fixed_block.append(") -> None:\n")
fixed_block.append('    """\n')
fixed_block.append("    –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n")
fixed_block.append("      üìä –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª (BUY)\n")
fixed_block.append("      üìå $TICKER @ 123.45\n")
fixed_block.append("      ‚àÜ%=4.49% | RSI=68.44 | EMA dev=2.92%\n")
fixed_block.append("      ATR%=2.23 | Vol=1.52%\n")
fixed_block.append('      ü§ñ GPT: "‚Ä¶"\n')
fixed_block.append('    """\n')
fixed_block.append("    try:\n")
fixed_block.append("        from core.utils.telegram import send_telegram_message\n")
fixed_block.append("        msg = (\n")
fixed_block.append('            f"üìä –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª (BUY)\\n"\n')
fixed_block.append('            f"üìå ${symbol} @ {price:.2f}\\n"\n')
fixed_block.append(
    '            f"‚àÜ%={percent_change:.2f}% | RSI={rsi:.2f} | EMA dev={ema_dev:.2f}%\\n"\n'
)
fixed_block.append('            f"ATR%={atr_pct:.2f} | Vol={volatility_pct:.2f}%\\n"\n')
fixed_block.append('            f"ü§ñ GPT: \\"{gpt_reply}\\""\n')
fixed_block.append("        )\n")
fixed_block.append("        send_telegram_message(msg)\n")
fixed_block.append("    except Exception as e:\n")
fixed_block.append('        print(f"[WARN] Telegram unified signal msg: {e}")\n')
fixed_block.append("\n")

# –ü—Ä–∏–º–µ–Ω–∏–º –∑–∞–º–µ–Ω—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –±—ç–∫–∞–ø
bak = fp.with_suffix(".py.before_header_fix.bak")
bak.write_text(src, encoding="utf-8")

new_src = "".join(lines[:start]) + "".join(fixed_block) + "".join(lines[end:])
fp.write_text(new_src, encoding="utf-8")

# –ü—Ä–æ–≤–µ—Ä–∏–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
try:
    py_compile.compile(str(fp), doraise=True)
    print("‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω—ë–Ω, syntax OK")
except Exception as e:
    print("‚ùó –ü–æ—Å–ª–µ –ø–∞—Ç—á–∞ –≤—Å—ë –µ—â—ë —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", e)
    print("   –ü–æ–∫–∞–∂–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç: nl -ba core/trading/signal_engine.py | sed -n '1,200p'")
