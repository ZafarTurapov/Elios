# -*- coding: utf-8 -*-
import json
import os
import sys
from pathlib import Path

import requests


# --- .env loader (–º—è–≥–∫–∏–π)
def _load_env(paths=("/root/stockbot/.env", ".env")):
    for fp in paths:
        p = Path(fp)
        if not p.exists():
            continue
        for ln in p.read_text(encoding="utf-8").splitlines():
            s = ln.strip()
            if not s or s.startswith("#") or "=" not in s:
                continue
            k, v = s.split("=", 1)
            k = k.strip()
            v = v.strip().strip("'").strip('"')
            if k and not os.environ.get(k):
                os.environ[k] = v


_load_env()


# --- mask helper
def _mask(x, keep=4):
    if not x:
        return "‚Äî"
    x = str(x)
    if len(x) <= keep * 2:
        return x[0:2] + "‚Ä¶" + x[-2:]
    return x[:keep] + "‚Ä¶" + x[-keep:]


ALPACA_API_KEY = os.getenv("ALPACA_API_KEY")
ALPACA_SECRET_KEY = os.getenv("ALPACA_SECRET_KEY")
ALPACA_BASE_URL = os.getenv("ALPACA_BASE_URL", "https://paper-api.alpaca.markets")
ALPACA_DATA_BASE = os.getenv("ALPACA_DATA_BASE", "https://data.alpaca.markets/v2")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

print("üîê –ö–ª—é—á–∏/—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
print(f"  ALPACA_API_KEY     = { _mask(ALPACA_API_KEY) }")
print(f"  ALPACA_SECRET_KEY  = { _mask(ALPACA_SECRET_KEY) }")
print(f"  ALPACA_BASE_URL    = { ALPACA_BASE_URL }")
print(f"  ALPACA_DATA_BASE   = { ALPACA_DATA_BASE }")
print(f"  OPENAI_API_KEY     = { _mask(OPENAI_API_KEY) }")

headers = {
    "APCA-API-KEY-ID": ALPACA_API_KEY or "",
    "APCA-API-SECRET-KEY": ALPACA_SECRET_KEY or "",
}

ok_alp_acc = ok_alp_data = ok_oai = False
err_alp_acc = err_alp_data = err_oai = None

# --- Alpaca /v2/account
try:
    r = requests.get(f"{ALPACA_BASE_URL}/v2/account", headers=headers, timeout=10)
    ok_alp_acc = r.status_code == 200 and isinstance(r.json(), dict)
    if not ok_alp_acc:
        err_alp_acc = f"HTTP {r.status_code} {r.text[:120]}"
except Exception as e:
    err_alp_acc = str(e)

# --- Alpaca quotes latest (AAPL)
try:
    r = requests.get(
        f"{ALPACA_DATA_BASE}/stocks/AAPL/quotes/latest",
        params={"feed": "iex"},
        headers=headers,
        timeout=10,
    )
    ok_alp_data = r.status_code == 200 and "quote" in (r.json() or {})
    if not ok_alp_data:
        err_alp_data = f"HTTP {r.status_code} {r.text[:120]}"
except Exception as e:
    err_alp_data = str(e)

# --- OpenAI tiny test (chat.completions)
try:
    from openai import OpenAI

    client = OpenAI(api_key=OPENAI_API_KEY)
    out = client.chat.completions.create(
        model=os.getenv("ELIOS_SIGNAL_GPT_MODEL", "gpt-4o-mini"),
        messages=[{"role": "user", "content": "ping"}],
        max_tokens=5,
        temperature=0.0,
    )
    ok_oai = bool(out and out.choices)
except Exception as e:
    err_oai = str(e)[:200]

print(
    "\n‚úÖ Alpaca account OK" if ok_alp_acc else f"‚ùå Alpaca account FAIL: {err_alp_acc}"
)
print("‚úÖ Alpaca data OK" if ok_alp_data else f"‚ùå Alpaca data FAIL: {err_alp_data}")
print("‚úÖ OpenAI OK" if ok_oai else f"‚ùå OpenAI FAIL: {err_oai}")

# --- –∑–∞–ø—É—Å–∫ signal_engine —Å –§–ò–õ–¨–¢–†–ê–ú–ò (NO_FILTERS=0). GPT –≤–∫–ª—é—á—ë–Ω, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ö–æ–¥–µ
env = os.environ.copy()
env["PYTHONPATH"] = "/root/stockbot"
env["ELIOS_FORCE_OPEN"] = "1"  # —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
env["ELIOS_NO_FILTERS"] = "0"  # –§–∏–ª—å—Ç—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã
env["ELIOS_NO_GPT"] = "0"  # –ü—Ä–æ–≤–µ—Ä—è–µ–º GPT –≤ –∫–æ–Ω–≤–µ–π–µ—Ä–µ
env["ELIOS_DEBUG"] = env.get("ELIOS_DEBUG", "0")

print("\nüöÄ –°—Ç–∞—Ä—Ç signal_engine.py —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (ELIOS_NO_FILTERS=0, ELIOS_NO_GPT=0)‚Ä¶")
import subprocess

ret = subprocess.run([sys.executable, "-u", "core/trading/signal_engine.py"], env=env)
print(f"signal_engine.py exit={ret.returncode}")

# --- –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º signals.json –≤ –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç (–Ω–∞ —Å–ª—É—á–∞–π legacy-–≤—ã–≤–æ–¥–∞)
sigp = Path("core/trading/signals.json")
if sigp.exists():
    try:
        obj = json.loads(sigp.read_text(encoding="utf-8"))
    except Exception:
        obj = {}
    if isinstance(obj, dict) and isinstance(obj.get("signals"), list):
        print(f"‚ÑπÔ∏è signals.json —É–∂–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (signals={len(obj['signals'])})")
    else:
        try:
            from core.trading.signals.io import normalize_signals, save_signals

            if isinstance(obj, dict):
                seq = [{"symbol": k, **(v or {})} for k, v in obj.items()]
            elif isinstance(obj, list):
                seq = obj
            else:
                seq = []
            payload = normalize_signals(seq)
            save_signals(payload, path=str(sigp))
            print(
                f"‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ ‚Üí {sigp} (signals={len(payload.get('signals',[]))})"
            )
        except Exception as e:
            print(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å signals.json: {e}")
else:
    print("‚ùó signals.json –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≥–æ–Ω–∞")

# --- –ö–æ—Ä–æ—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
try:
    obj = json.loads(Path("core/trading/signals.json").read_text(encoding="utf-8"))
    cnt = len(obj.get("signals", [])) if isinstance(obj, dict) else 0
    print(f"\nüì¶ –ò—Ç–æ–≥: signals={cnt}")
    if cnt:
        first = obj["signals"][0]
        print(
            "‚ñ∂ sample:",
            {k: first.get(k) for k in ("symbol", "price", "action", "weight")},
        )
except Exception as e:
    print(f"‚ùó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
